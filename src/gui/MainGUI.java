/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import twitter4j.Query;
import twitter4j.Status;
import utilities.consoleredirect.MessageConsole;
import utilities.generalutils.*;
import static utilities.generalutils.GeneralFileUtils.stopwordsCorrupted;
import utilities.sqlhandling.*;
import utilities.tweetshandling.*;

/**
 *
 * @author Dimitrios
 */
public class MainGUI extends JFrame {

    /**
     * Creates new form GUI
     */
    public MainGUI() {
        initComponents();
        try {
            stopwordsCorrupted(new File("stopwords.txt"));
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        jMessageConsoleTextPane.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
        _mc = new MessageConsole(jMessageConsoleTextPane, true);
        _mc.redirectOut(null, null);
        _mc.redirectErr(Color.RED, null);
        _mc.setMessageLines(100);

        _tweets = new ArrayList<>();

        if (PropertiesFilesUtils.propertiesErrorFound()) {
            Printer.printErrln("Property file \"config.properties\" is "
                    + "missing or corrupted!");
            Printer.println("Resetting properties and creating new file...");
            PropertiesFilesUtils.setDefaultPropertyFile();
            Printer.printErrln("Please re-enter your credentials in the settings menu!");
        } else {
            Printer.println("Settings were retrieved succesfully");
        }
        _user = new User(PropertiesFilesUtils.getPropertyValue("username"),
                PropertiesFilesUtils.getPropertyValue("password"));
        _connector = new Connector(_user,
                PropertiesFilesUtils.getPropertyValue("hostname"),
                Integer.parseInt(PropertiesFilesUtils.getPropertyValue("port")));
        System.out.println(DASHES);

        Printer.println("Gathering available databases...");
        updateDatabaseComboBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMessageConsolePane = new javax.swing.JScrollPane();
        jMessageConsoleTextPane = new javax.swing.JTextPane();
        jButtonsPane = new javax.swing.JPanel();
        jSettingsButton = new javax.swing.JButton();
        jGetSQLVersionButton = new javax.swing.JButton();
        jRunXAMPPButton = new javax.swing.JButton();
        jClearButton = new javax.swing.JButton();
        jSQLPanel = new javax.swing.JPanel();
        jDatabaseLabel = new javax.swing.JLabel();
        jDatabaseComboBox = new javax.swing.JComboBox();
        jTableComboBox = new javax.swing.JComboBox();
        jTableLabel = new javax.swing.JLabel();
        jWorkingInLabel = new javax.swing.JLabel();
        jTweetsInMemoryLabel = new javax.swing.JLabel();
        jTweetsInDatabaseLabel = new javax.swing.JLabel();
        jRefreshDatabasesButton = new javax.swing.JButton();
        jDeleteDatabaseButton = new javax.swing.JButton();
        jDeleteTableButton = new javax.swing.JButton();
        jCreateDatabaseButton = new javax.swing.JButton();
        jCreateTableButton = new javax.swing.JButton();
        jTwitterToolsPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMinutesSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jHoursSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jDaysSpinner = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        jKeywordsLabel = new javax.swing.JLabel();
        jKeywordsField = new javax.swing.JTextField();
        jTownLabel = new javax.swing.JLabel();
        jTownField = new javax.swing.JTextField();
        jSinceDateLabel = new javax.swing.JLabel();
        jSinceDateChooser = new com.toedter.calendar.JDateChooser();
        jUntilDateChooser = new com.toedter.calendar.JDateChooser();
        jUntilDateLabel = new javax.swing.JLabel();
        jAutoInsertCheckbox = new javax.swing.JCheckBox();
        jDownloadTweetsButton = new javax.swing.JButton();
        jTopWordsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tweet Fetcher");
        setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        setMinimumSize(new java.awt.Dimension(782, 441));

        jMessageConsoleTextPane.setContentType("text/html"); // NOI18N
        jMessageConsoleTextPane.setFont(getFont());
        jMessageConsolePane.setViewportView(jMessageConsoleTextPane);

        jButtonsPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buttons", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N
        jButtonsPane.setFont(getFont());

        jSettingsButton.setFont(getFont());
        jSettingsButton.setText("Settings");
        jSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSettingsButtonActionPerformed(evt);
            }
        });

        jGetSQLVersionButton.setFont(getFont());
        jGetSQLVersionButton.setText("SQL version");
        jGetSQLVersionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGetSQLVersionButtonActionPerformed(evt);
            }
        });

        jRunXAMPPButton.setFont(getFont());
        jRunXAMPPButton.setText("Run XAMPP");
        jRunXAMPPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRunXAMPPButtonActionPerformed(evt);
            }
        });

        jClearButton.setFont(getFont());
        jClearButton.setText("Clear");
        jClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jButtonsPaneLayout = new javax.swing.GroupLayout(jButtonsPane);
        jButtonsPane.setLayout(jButtonsPaneLayout);
        jButtonsPaneLayout.setHorizontalGroup(
            jButtonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jButtonsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jButtonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRunXAMPPButton, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(jGetSQLVersionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jSettingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jClearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jButtonsPaneLayout.setVerticalGroup(
            jButtonsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jButtonsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSettingsButton)
                .addGap(37, 37, 37)
                .addComponent(jRunXAMPPButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jGetSQLVersionButton)
                .addGap(43, 43, 43)
                .addComponent(jClearButton)
                .addContainerGap())
        );

        jSQLPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SQL Tools", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N
        jSQLPanel.setFont(getFont());

        jDatabaseLabel.setFont(getFont());
        jDatabaseLabel.setLabelFor(jDatabaseComboBox);
        jDatabaseLabel.setText("Database:");
        jDatabaseLabel.setEnabled(false);

        jDatabaseComboBox.setEditable(true);
        jDatabaseComboBox.setFont(getFont());
        jDatabaseComboBox.setEnabled(false);
        jDatabaseComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDatabaseComboBoxActionPerformed(evt);
            }
        });

        jTableComboBox.setEditable(true);
        jTableComboBox.setFont(getFont());
        jTableComboBox.setEnabled(false);
        jTableComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTableComboBoxActionPerformed(evt);
            }
        });

        jTableLabel.setFont(getFont());
        jTableLabel.setLabelFor(jTableComboBox);
        jTableLabel.setText("Table:");
        jTableLabel.setEnabled(false);

        jWorkingInLabel.setFont(getFont());
        jWorkingInLabel.setText("Working in: <none> / <none>");

        jTweetsInMemoryLabel.setFont(getFont());
        jTweetsInMemoryLabel.setText("0 tweets currently in memory");

        jTweetsInDatabaseLabel.setFont(getFont());
        jTweetsInDatabaseLabel.setText("0 tweets currently in the database");

        jRefreshDatabasesButton.setFont(getFont());
        jRefreshDatabasesButton.setText("Refresh");
        jRefreshDatabasesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRefreshDatabasesButtonActionPerformed(evt);
            }
        });

        jDeleteDatabaseButton.setFont(getFont());
        jDeleteDatabaseButton.setText("Delete");
        jDeleteDatabaseButton.setEnabled(false);
        jDeleteDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteDatabaseButtonActionPerformed(evt);
            }
        });

        jDeleteTableButton.setFont(getFont());
        jDeleteTableButton.setText("Delete");
        jDeleteTableButton.setEnabled(false);
        jDeleteTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteTableButtonActionPerformed(evt);
            }
        });

        jCreateDatabaseButton.setFont(getFont());
        jCreateDatabaseButton.setText("Create");
        jCreateDatabaseButton.setEnabled(false);
        jCreateDatabaseButton.setPreferredSize(new java.awt.Dimension(63, 23));
        jCreateDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCreateDatabaseButtonActionPerformed(evt);
            }
        });

        jCreateTableButton.setFont(getFont());
        jCreateTableButton.setText("Create");
        jCreateTableButton.setEnabled(false);
        jCreateTableButton.setPreferredSize(new java.awt.Dimension(63, 23));
        jCreateTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCreateTableButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jSQLPanelLayout = new javax.swing.GroupLayout(jSQLPanel);
        jSQLPanel.setLayout(jSQLPanelLayout);
        jSQLPanelLayout.setHorizontalGroup(
            jSQLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSQLPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jSQLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jWorkingInLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jSQLPanelLayout.createSequentialGroup()
                        .addComponent(jTableLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jSQLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jSQLPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jCreateTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDeleteTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jSQLPanelLayout.createSequentialGroup()
                                .addComponent(jTableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jTweetsInMemoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jSQLPanelLayout.createSequentialGroup()
                        .addComponent(jDatabaseLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDatabaseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTweetsInDatabaseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jSQLPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jSQLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jSQLPanelLayout.createSequentialGroup()
                                .addComponent(jCreateDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDeleteDatabaseButton))
                            .addComponent(jRefreshDatabasesButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );

        jSQLPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jDatabaseLabel, jTableLabel});

        jSQLPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jDatabaseComboBox, jTableComboBox});

        jSQLPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jCreateDatabaseButton, jCreateTableButton, jDeleteDatabaseButton, jDeleteTableButton, jRefreshDatabasesButton});

        jSQLPanelLayout.setVerticalGroup(
            jSQLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSQLPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jSQLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDatabaseLabel)
                    .addComponent(jDatabaseComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jSQLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDeleteDatabaseButton)
                    .addComponent(jCreateDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jSQLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTableLabel)
                    .addComponent(jTableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jSQLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jSQLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jDeleteTableButton)
                        .addComponent(jCreateTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jSQLPanelLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jWorkingInLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTweetsInMemoryLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTweetsInDatabaseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRefreshDatabasesButton)
                .addContainerGap())
        );

        jSQLPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jCreateDatabaseButton, jCreateTableButton, jDeleteDatabaseButton, jDeleteTableButton});

        jSQLPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jDatabaseComboBox, jTableComboBox});

        jSQLPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jDatabaseLabel, jTableLabel});

        jSQLPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jTweetsInDatabaseLabel, jTweetsInMemoryLabel, jWorkingInLabel});

        jTwitterToolsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Twitter Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N
        jTwitterToolsPanel.setFont(getFont());

        jLabel1.setFont(getFont());
        jLabel1.setText("Run for:");

        jLabel2.setFont(getFont());
        jLabel2.setLabelFor(jMinutesSpinner);
        jLabel2.setText("Minutes:");

        jMinutesSpinner.setFont(getFont());
        jMinutesSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        jMinutesSpinner.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jMinutesSpinnerPropertyChange(evt);
            }
        });

        jLabel3.setFont(getFont());
        jLabel3.setLabelFor(jHoursSpinner);
        jLabel3.setText("Hours:");

        jHoursSpinner.setFont(getFont());
        jHoursSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
        jHoursSpinner.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jHoursSpinnerPropertyChange(evt);
            }
        });

        jLabel4.setFont(getFont());
        jLabel4.setLabelFor(jDaysSpinner);
        jLabel4.setText("Days:");

        jDaysSpinner.setFont(getFont());
        jDaysSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));
        jDaysSpinner.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDaysSpinnerPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jMinutesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jHoursSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDaysSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jDaysSpinner, jHoursSpinner, jMinutesSpinner});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jMinutesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jHoursSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jDaysSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jKeywordsLabel.setFont(getFont());
        jKeywordsLabel.setText("Keywords:");

        jKeywordsField.setFont(getFont());

        jTownLabel.setFont(getFont());
        jTownLabel.setLabelFor(jTownField);
        jTownLabel.setText("Town:");

        jTownField.setFont(getFont());

        jSinceDateLabel.setFont(getFont());
        jSinceDateLabel.setText("Since:");

        jSinceDateChooser.setMaxSelectableDate(new Date());
        jSinceDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSinceDateChooserPropertyChange(evt);
            }
        });

        jUntilDateChooser.setMaxSelectableDate(new Date());
        jUntilDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jUntilDateChooserPropertyChange(evt);
            }
        });

        jUntilDateLabel.setFont(getFont());
        jUntilDateLabel.setText("Until:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTownLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jKeywordsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jKeywordsField, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addComponent(jTownField)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jUntilDateLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jUntilDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jSinceDateLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jSinceDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jKeywordsLabel, jSinceDateLabel, jUntilDateLabel});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jKeywordsLabel)
                    .addComponent(jKeywordsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTownField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTownLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSinceDateLabel)
                    .addComponent(jSinceDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jUntilDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jUntilDateLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jKeywordsLabel, jSinceDateLabel, jUntilDateLabel});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jSinceDateChooser, jUntilDateChooser});

        jAutoInsertCheckbox.setFont(getFont());
        jAutoInsertCheckbox.setText("Insert Into Database automaticaly");
        jAutoInsertCheckbox.setEnabled(false);

        jDownloadTweetsButton.setFont(getFont());
        jDownloadTweetsButton.setText("Download Tweets");
        jDownloadTweetsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDownloadTweetsButtonActionPerformed(evt);
            }
        });

        jTopWordsButton.setFont(getFont());
        jTopWordsButton.setText("Show Top Words");
        jTopWordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTopWordsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jTwitterToolsPanelLayout = new javax.swing.GroupLayout(jTwitterToolsPanel);
        jTwitterToolsPanel.setLayout(jTwitterToolsPanelLayout);
        jTwitterToolsPanelLayout.setHorizontalGroup(
            jTwitterToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jTwitterToolsPanelLayout.createSequentialGroup()
                .addGroup(jTwitterToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jTwitterToolsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jTwitterToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jTwitterToolsPanelLayout.createSequentialGroup()
                                .addComponent(jDownloadTweetsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTopWordsButton))
                            .addGroup(jTwitterToolsPanelLayout.createSequentialGroup()
                                .addGroup(jTwitterToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jAutoInsertCheckbox))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jTwitterToolsPanelLayout.setVerticalGroup(
            jTwitterToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jTwitterToolsPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jAutoInsertCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jTwitterToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDownloadTweetsButton)
                    .addComponent(jTopWordsButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jMessageConsolePane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonsPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSQLPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTwitterToolsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTwitterToolsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSQLPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonsPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jMessageConsolePane, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateDatabaseComboBoxes() {
        String[] databases = Converter.listToStringArray(_connector.getDatabases());
        System.out.println(DASHES);

        if (databases.length != 0) {
            jDatabaseLabel.setEnabled(true);
            jDatabaseComboBox.setEnabled(true);
            jCreateDatabaseButton.setEnabled(true);
            jDeleteDatabaseButton.setEnabled(true);

            jDatabaseComboBox.setModel(new DefaultComboBoxModel(databases));

            _currentDatabase = new SQLDatabase(jDatabaseComboBox.getSelectedItem().toString(),
                    _connector);
        } else {
            jDatabaseLabel.setEnabled(false);
            jDatabaseComboBox.setEnabled(false);
            jCreateDatabaseButton.setEnabled(false);
            jDeleteDatabaseButton.setEnabled(false);

            jTableLabel.setEnabled(false);
            jTableComboBox.setEnabled(false);
            jCreateTableButton.setEnabled(false);
            jDeleteTableButton.setEnabled(false);

            jDatabaseComboBox.setModel(new DefaultComboBoxModel());

            _currentDatabase = null;
        }
        updateTableComboBoxes();
    }

    private void updateTableComboBoxes() {
        if (jDatabaseComboBox.getSelectedItem() != null) {
            jTableLabel.setEnabled(true);
            jTableComboBox.setEnabled(true);
            jCreateTableButton.setEnabled(true);
            jDeleteTableButton.setEnabled(true);

            jTableComboBox.setModel(new DefaultComboBoxModel(Converter.
                    listToStringArray(_currentDatabase.getTables())));
            System.out.println(DASHES);

            if (jTableComboBox.getSelectedItem() != null) {
                _currentTable = jTableComboBox.getSelectedItem().toString();
            } else {
                _currentTable = null;
            }
        } else {
            jTableLabel.setEnabled(false);
            jTableComboBox.setEnabled(false);
            jCreateTableButton.setEnabled(false);
            jDeleteTableButton.setEnabled(false);

            jTableComboBox.setModel(new DefaultComboBoxModel());

            _currentDatabase = null;
        }
        updateLabels();
    }

    private void updateLabels() {
        String databaseName;
        String tableName;
        if (_currentDatabase == null) {
            jAutoInsertCheckbox.setSelected(false);
            jAutoInsertCheckbox.setEnabled(false);
            jTweetsInDatabaseLabel.setText("0 tweets currently in the database");
            jTopWordsButton.setEnabled(false);
            databaseName = "<none>";
            tableName = "<none>";
        } else if (_currentTable == null) {
            databaseName = _currentDatabase.getName();
            tableName = "<none>";
            jAutoInsertCheckbox.setSelected(false);
            jAutoInsertCheckbox.setEnabled(false);
            jTweetsInDatabaseLabel.setText("0 tweets currently in the database");
            jTopWordsButton.setEnabled(false);
        } else {
            databaseName = _currentDatabase.getName();
            tableName = _currentTable;
            jAutoInsertCheckbox.setEnabled(true);
            jTweetsInDatabaseLabel.setText(_currentDatabase.getRowsCount(_currentTable)
                    + " tweets currently in the database");
            jTopWordsButton.setEnabled(true);
        }
        jWorkingInLabel.setText("Working in: " + databaseName + " / " + tableName);
    }

    private void jSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSettingsButtonActionPerformed
        SettingsWindow settings = new SettingsWindow();

        int result = JOptionPane.showOptionDialog(null,
                settings,
                "Settings",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null,
                new String[]{"Save", "Cancel"}, // this is the array
                "default");
        if (result == JOptionPane.OK_OPTION) {
            List<Pair<String, String>> settingPairs = new ArrayList<>();
            settingPairs.add(new Pair("username", settings.getUsername()));
            settingPairs.add(new Pair("password", settings.getPassword()));
            settingPairs.add(new Pair("hostname", settings.getHostname()));
            settingPairs.add(new Pair("port", settings.getPort()));

            PropertiesFilesUtils.updatePropertyFile(settingPairs);

            _user = new User(settings.getUsername(), settings.getPassword());
            _connector = new Connector(_user, settings.getHostname(), Integer.parseInt(settings.getPort()));
        }
    }//GEN-LAST:event_jSettingsButtonActionPerformed

    private void jGetSQLVersionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGetSQLVersionButtonActionPerformed
        String version = _connector.checkConnection();
        if (!version.trim().isEmpty()) {
            System.out.println(version);
        }
        System.out.println(DASHES);
    }//GEN-LAST:event_jGetSQLVersionButtonActionPerformed

    private void jCreateDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCreateDatabaseButtonActionPerformed
        final String selectedDatabaseName = jDatabaseComboBox.getSelectedItem().
                toString().trim();

        if (selectedDatabaseName.isEmpty()) {
            return;
        } else if (GeneralUtils.isIn(selectedDatabaseName, _connector.getDatabases())) {
            _currentDatabase = new SQLDatabase(jDatabaseComboBox.getSelectedItem().toString(), _connector);
            updateTableComboBoxes();
        } else {
            _connector.createDatabase(selectedDatabaseName);
            updateDatabaseComboBoxes();
        }
    }//GEN-LAST:event_jCreateDatabaseButtonActionPerformed

    private void jDeleteDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteDatabaseButtonActionPerformed
        final String selectedDatabaseName = jDatabaseComboBox.getSelectedItem().
                toString().trim();

        if (selectedDatabaseName.isEmpty()) {
            return;
        } else if (!GeneralUtils.isIn(selectedDatabaseName, _connector.getDatabases())) {
            return;
        } else {
            _connector.deleteDatabase(selectedDatabaseName);
            updateDatabaseComboBoxes();
        }
    }//GEN-LAST:event_jDeleteDatabaseButtonActionPerformed

    private void jCreateTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCreateTableButtonActionPerformed
        final String selectedTableName = jTableComboBox.getSelectedItem().
                toString().trim();

        if (selectedTableName.isEmpty()) {
            return;
        } else if (GeneralUtils.isIn(selectedTableName, _currentDatabase.getTables())) {
            _currentTable = selectedTableName;
            updateLabels();
        } else {
            _currentDatabase.createTable(selectedTableName);
            updateTableComboBoxes();
        }
    }//GEN-LAST:event_jCreateTableButtonActionPerformed

    private void jRefreshDatabasesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRefreshDatabasesButtonActionPerformed
        Printer.println("Gathering available databases...");
        updateDatabaseComboBoxes();
    }//GEN-LAST:event_jRefreshDatabasesButtonActionPerformed

    private void jTableComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTableComboBoxActionPerformed
        final String selectedTableName = jTableComboBox.getSelectedItem().
                toString().trim();

        if (jTableComboBox.getSelectedItem() == null
                || selectedTableName.isEmpty()) {
            return;
        } else if (GeneralUtils.isIn(selectedTableName, _currentDatabase.getTables())) {
            _currentTable = selectedTableName;
            updateLabels();
        } else {
            _currentDatabase.createTable(selectedTableName);
            updateTableComboBoxes();
        }
    }//GEN-LAST:event_jTableComboBoxActionPerformed

    private void jRunXAMPPButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRunXAMPPButtonActionPerformed
    {//GEN-HEADEREND:event_jRunXAMPPButtonActionPerformed
        String[] paths = {"C:\\xampp\\xampp-control.exe",
            "C:\\Program Files\\xampp\\xampp-control.exe",
            "C:\\Program Files (x86)\\xampp\\xampp-control.exe"};

        for (String path : paths) {
            final File file = new File(path);

            if (file.exists()) {
                try {
                    Process p = Runtime.getRuntime().exec(file.getAbsolutePath());
                } catch (IOException e) {
                    continue;
                }
                return;
            }
        }
        Printer.printErrln("xampp-control.exe was not found!");
        System.out.println(DASHES);
    }//GEN-LAST:event_jRunXAMPPButtonActionPerformed

    private void jDeleteTableButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jDeleteTableButtonActionPerformed
    {//GEN-HEADEREND:event_jDeleteTableButtonActionPerformed
        final String selectedTableName = jTableComboBox.getSelectedItem()
                .toString()
                .trim();

        if (selectedTableName.isEmpty()) {
            return;
        } else if (!GeneralUtils.isIn(selectedTableName, _currentDatabase.getTables())) {
            return;
        } else {
            _currentDatabase.deleteTable(selectedTableName);
            updateTableComboBoxes();
        }
    }//GEN-LAST:event_jDeleteTableButtonActionPerformed

    private void jDatabaseComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jDatabaseComboBoxActionPerformed
    {//GEN-HEADEREND:event_jDatabaseComboBoxActionPerformed
        final String selectedDatabaseName = jDatabaseComboBox.getSelectedItem()
                .toString()
                .trim();

        if (selectedDatabaseName.isEmpty()) {
            return;
        } else if (GeneralUtils.isIn(selectedDatabaseName, _connector.getDatabases())) {
            _currentDatabase = new SQLDatabase(selectedDatabaseName, _connector);
            updateTableComboBoxes();
        } else {
            _connector.createDatabase(selectedDatabaseName);
            updateDatabaseComboBoxes();
        }
    }//GEN-LAST:event_jDatabaseComboBoxActionPerformed

    private void jClearButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jClearButtonActionPerformed
    {//GEN-HEADEREND:event_jClearButtonActionPerformed
        jMessageConsoleTextPane.setText("");
    }//GEN-LAST:event_jClearButtonActionPerformed

    private void jDownloadTweetsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDownloadTweetsButtonActionPerformed
        final int minutesValue = (Integer) jMinutesSpinner.getValue();
        final int hoursValue = (Integer) jHoursSpinner.getValue();
        final int daysValue = (Integer) jDaysSpinner.getValue();
        final long totalTime = minutesValue * 60000 + hoursValue * 3600000
                + daysValue * 86400000;
        long startTime = System.currentTimeMillis();
        boolean isDone = false;

        final int timeout;
        if (totalTime < 120000) {
            timeout = 0;
        } else {
            timeout = 120000;
        }

        final Query query = TwitterTools.queryMaker(
                jKeywordsField.getText().trim(),
                jSinceDateChooser.getDate(),
                jUntilDateChooser.getDate(),
                100);
        while (!isDone) {
            final int previousSize = _tweets.size();
            _tweets.addAll(TwitterTools.search(query));
            TwitterTools.filterTweetsBasedOnCity(_tweets, jTownField.getText().trim());
            int afterSize = _tweets.size();
            Printer.println(afterSize - previousSize + " tweets were downloaded.");

            if (jAutoInsertCheckbox.isSelected()) {
                Printer.println("Updating database...");
                _currentDatabase.insert(_tweets, _currentTable);
                System.out.println(DASHES);

                _tweets.clear();
                afterSize = 0;

                jTweetsInDatabaseLabel.setText(
                        _currentDatabase.getRowsCount(_currentTable)
                        + " tweets currently in the database");
                System.out.println(DASHES);
            }
            jTweetsInMemoryLabel.setText(afterSize + " tweets currently in memory");

            try {
                Thread.sleep(timeout);
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
            }

            isDone = (System.currentTimeMillis() - startTime >= totalTime);
        }
    }//GEN-LAST:event_jDownloadTweetsButtonActionPerformed

    private void jSinceDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSinceDateChooserPropertyChange
        if (jSinceDateChooser.getDate() == null) {
            return;
        }

        if (GeneralUtils.datesAreEqual(jSinceDateChooser.getDate(), new Date())) {
            jUntilDateChooser.setDate(jSinceDateChooser.getDate());
            jUntilDateChooser.setEnabled(false);
        } else {
            jUntilDateChooser.setEnabled(true);
        }
    }//GEN-LAST:event_jSinceDateChooserPropertyChange

    private void jUntilDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jUntilDateChooserPropertyChange
        if (jUntilDateChooser.getDate() == null) {
            return;
        }
        jSinceDateChooser.setMaxSelectableDate(jUntilDateChooser.getDate());
    }//GEN-LAST:event_jUntilDateChooserPropertyChange

    private void jTopWordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTopWordsButtonActionPerformed
        List<String[]> wordsArrays = Converter.stringListToStringWordArray(
                _currentDatabase.getField("editedText", _currentTable));
        List<String[]> hashtagsArrays = Converter.stringListToStringWordArray(
                _currentDatabase.getField("hashtags", _currentTable));

        String htmlTable = WordCounting.getHtmlTable(wordsArrays, hashtagsArrays);
        jMessageConsoleTextPane.setText(htmlTable);
    }//GEN-LAST:event_jTopWordsButtonActionPerformed

    private void jMinutesSpinnerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jMinutesSpinnerPropertyChange
        final int minutesValue = (Integer) jMinutesSpinner.getValue();
        final int hoursValue = (Integer) jHoursSpinner.getValue();
        final int daysValue = (Integer) jDaysSpinner.getValue();
        if (minutesValue != 0 || hoursValue != 0 || daysValue != 0) {
            jAutoInsertCheckbox.setSelected(true);
            jAutoInsertCheckbox.setEnabled(false);
        }
        updateLabels();
    }//GEN-LAST:event_jMinutesSpinnerPropertyChange

    private void jHoursSpinnerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jHoursSpinnerPropertyChange
        final int minutesValue = (Integer) jMinutesSpinner.getValue();
        final int hoursValue = (Integer) jHoursSpinner.getValue();
        final int daysValue = (Integer) jDaysSpinner.getValue();
        if (minutesValue != 0 || hoursValue != 0 || daysValue != 0) {
            jAutoInsertCheckbox.setSelected(true);
            jAutoInsertCheckbox.setEnabled(false);
        }
        updateLabels();
    }//GEN-LAST:event_jHoursSpinnerPropertyChange

    private void jDaysSpinnerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDaysSpinnerPropertyChange
        final int minutesValue = (Integer) jMinutesSpinner.getValue();
        final int hoursValue = (Integer) jHoursSpinner.getValue();
        final int daysValue = (Integer) jDaysSpinner.getValue();
        if (minutesValue != 0 || hoursValue != 0 || daysValue != 0) {
            jAutoInsertCheckbox.setSelected(true);
            jAutoInsertCheckbox.setEnabled(false);
        }
        updateLabels();
    }//GEN-LAST:event_jDaysSpinnerPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    private User _user;
    private Connector _connector;
    private SQLDatabase _currentDatabase;
    private String _currentTable;

    private final List<Status> _tweets;

    private final MessageConsole _mc;

    public static final String DASHES = new String(new char[80]).replace("\0", "-");

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jAutoInsertCheckbox;
    private javax.swing.JPanel jButtonsPane;
    private javax.swing.JButton jClearButton;
    private javax.swing.JButton jCreateDatabaseButton;
    private javax.swing.JButton jCreateTableButton;
    private javax.swing.JComboBox jDatabaseComboBox;
    private javax.swing.JLabel jDatabaseLabel;
    private javax.swing.JSpinner jDaysSpinner;
    private javax.swing.JButton jDeleteDatabaseButton;
    private javax.swing.JButton jDeleteTableButton;
    private javax.swing.JButton jDownloadTweetsButton;
    private javax.swing.JButton jGetSQLVersionButton;
    private javax.swing.JSpinner jHoursSpinner;
    private javax.swing.JTextField jKeywordsField;
    private javax.swing.JLabel jKeywordsLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jMessageConsolePane;
    private javax.swing.JTextPane jMessageConsoleTextPane;
    private javax.swing.JSpinner jMinutesSpinner;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jRefreshDatabasesButton;
    private javax.swing.JButton jRunXAMPPButton;
    private javax.swing.JPanel jSQLPanel;
    private javax.swing.JButton jSettingsButton;
    private com.toedter.calendar.JDateChooser jSinceDateChooser;
    private javax.swing.JLabel jSinceDateLabel;
    private javax.swing.JComboBox jTableComboBox;
    private javax.swing.JLabel jTableLabel;
    private javax.swing.JButton jTopWordsButton;
    private javax.swing.JTextField jTownField;
    private javax.swing.JLabel jTownLabel;
    private javax.swing.JLabel jTweetsInDatabaseLabel;
    private javax.swing.JLabel jTweetsInMemoryLabel;
    private javax.swing.JPanel jTwitterToolsPanel;
    private com.toedter.calendar.JDateChooser jUntilDateChooser;
    private javax.swing.JLabel jUntilDateLabel;
    private javax.swing.JLabel jWorkingInLabel;
    // End of variables declaration//GEN-END:variables
}
